
--- Aufwand-Zahlen ---

a-Test1:   1.944
b-Test1:     162
c-Test1: 290.400
d-Test1: 185.856

a-Start: 6,050e24
b-Start: 2,626e21
c-Start: 2,786e48 (2.786.159.986.491.845.798.121.855.837.599.675.001.589.632.860.160)
d-Start: 6,191e47 (619.146.663.664.854.621.804.856.852.799.927.778.131.029.524.480)

a-Moves: 2,713e30
b-Moves: 3,768e28
c-Moves: 8,218e72 (8.217.840.843.879.263.757.211.037.441.362.776.441.322.014.513.862.363.264.105.668.582.939.033.600)
d-Moves: 8,218e72 (8.217.840.843.879.263.757.211.037.441.362.776.441.322.014.513.862.363.264.105.668.582.939.033.600)

a-Monst: 7,943e314
b-Monst: 1,569e314
c-Monst: 6,524e882 (6.524.122.603.693.242.880.661.272.904.118.914.238.602.368.610.159.826.568.012.388.535.613.383.737 ...)
d-Monst: 6,524e882 (6.524.122.603.693.242.880.661.272.904.118.914.238.602.368.610.159.826.568.012.388.535.613.383.737 ...)

a: Basis-Version
b: Status-Filter: Spieler können sich nur auf Feldern befinden, wo direkt vorher eine Kiste weggeschoben wurde oder es sich um ein Startfeld handelt
c: Neu: Varianten werden nun als Berechnungsgrundlage verwendet
d: Filtern von Kisten-Netzwerken (zusammenhängende Räume, welche mit Kisten arbeiten könnten aber nie Kisten enthalten werden)


--- Room-Portals ---
- Hauptklasse (RoomSolver) erstellen
- Vorbereitung
-- Room-Klasse erstellen
--- Info hinzufügen, welche Zielfelder enthalten sind
--- Referenzen für andere Rooms hinzufügen (Array)
--- Rooms aus allen gültigen Feldern erstellen
---- Rooms mit Nachbarn referenzieren
---- Basis-Funktionalität
----- Bitter hinzufügen (für Kisten-Bitmaske)
----- mögliche Zustände erstellen und im Raum speichern
------ Basis Anfangs-Stellung hinzufügen
------ Basis Ziel-Stellung hinzufügen
------ Abgleich: leeres Feld
------ Abgleich: Feld mit Spieler
------ Abgleich: Feld mit Kiste
----- für Portale zugehörige Varianten ermitteln, und in den Portalen speichern
------ Rückwärts gerichtete Portale ebenfalls referenzieren (eingehend)
-- begehbare/zusammenhängende Felder scannen
-- Portal-Klasse erstellen
- DisplayConsole
-- Anzeige des gesamten Spielfeldes
-- Anzeige des gesamten Spielfeldes ohne Kisten und ohne Spieler
-- Räume auswählbar machen und zeigen (dunkelgrün)
-- Portale der Räume anzeigen (dunkelrot)
-- alle Zustände des Raumes auswählbar machen und darstellen
-- Portale auswählbar machen und separat zeigen (weiß)
-- Portal-Varianten auswählbar machen
--- Details der Varianten zeigen (z.B. Anzahl der Spielzüge um einen bestimmten Zustand zu erreichen)


--- Projekte erstellen und einrichten ---

- SokoWahnLib erstellen (Klassenbibliothek)
-- Projekt erstellen und zur Solution hinzufügen
-- Unsafe erlauben
- SokoWahnTool erstellen (Konsolenprogramm)
-- Projekt erstellen und zur Solution hinzufügen
-- Projekt auf AnyCpu umstellen
-- SokoWahnLib verweisen


--- Basis-Spiel erstellen ---

- einfaches Spielfeld erstellen (Textbasiert) mit Test-Map
-- eigene Exception-Klasse für fehlerhafte Spielfelder
-- Konstruktor mit Textfeld/Textdatei
--- maximale Anzahl der Zeilen ermitteln
--- maximale Anzahl der Spalten ermitteln
--- Größe des Spielfeldes prüfen
--- Spielfeld zeichenbasiert einlesen (unbekannte Zeichen durch Leerzeichen ersetzen)
--- trimmen von leeren Randbereichen
---- leere Spalten links zählen
---- leere Spelten rechts zählen
---- leere Zeilen oben zählen
---- leere Zeilen unten zählen
---- auf ungültigen Zustand prüfen
---- Spielfeld zurecht schneiden (sofern notwendig)
--- Spieler suchen und Position merken (nur genau einer Spieler darf vorhanden sein)
--- Ziele zählen
--- Kisten zählen und mit Anzahl der Ziele vergleichen
--- Mindestanzahl von einer Kiste erwarten
-- allgemeines Interface und entsprechende Methoden für das Spielfeld erstellen
--- Abfrage-Property für die Breite des Spielfeldes
--- Abfrage-Property für die Höhe des Spielfeldes
--- Abfrage-Property für Spieler-Position (pos: x + y * Breite)
--- Abfrage-Methode eines bestimmten Spielfeldes (pos: x + y * Breite)
--- grundlegende Spielfunktionen hinzufügen
---- Spielerbewegung, jeweils: links, rechts, oben und unten
----- prüfen, ob der Schritt erlaubt ist
------ Weg ist durch eine Mauer blockiert
------ Laufbarkeit in ein leeres benachbartes Feld
------ Verschiebbarkeit einer anliegenden Kiste im benachbarten Feld
------ anliegende Kiste, welche nicht verschiebbar ist
----- Bewegung ausführen
------ laufen (ohne Kiste)
------ schieben (mit Kiste)
- reale Spielbarkeit hinzufügen
-- einfache Text-Ausgabe des Spielfeldes
--- sichbare Ausgabe erneuern
-- Tasten abfragen (links, rechts, oben, unten und zurück)
-- prüfen, Spielzüge möglich sind
--- Bewegungscheck, ob Zug erlaubt ist
-- entsprechend erlaubte Spielzüge durchführen
