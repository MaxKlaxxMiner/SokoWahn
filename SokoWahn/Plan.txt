
--- Projekte erstellen und einrichten ---

- SokoWahnHelper erstellen (Window-Forms Programm)
-- Projekt erstellen und zur Solution hinzufügen
-- Projekt auf AnyCpu umstellen
-- SokoWahnLib verweisen
- SokoWahnTest erstellen (Unit-Test)
-- Projekt erstellen und zur Solution hinzufügen
-- SokoWahnLib verweisen


--- Basis-Spiel erstellen ---

- einfaches Spielfeld erstellen (Textbasiert) mit Test-Map
-- allgemeines Interface und entsprechende Methoden für das Spielfeld erstellen
--- grundlegende Spielfunktionen hinzufügen
---- Spielerbewegung, jeweils: links, rechts, oben und unten
----- prüfen, ob der Schritt erlaubt ist
------ Weg ist durch eine Mauer blockiert
------ Laufbarkeit in ein leeres benachbartes Feld
------ Verschiebbarkeit einer anliegenden Kiste im benachbarten Feld
------ anliegende Kiste, welche nicht verschiebbar ist
----- Bewegung ausführen
------ laufen (ohne Kiste)
------ schieben (mit Kiste)
------ Schritte jeder Art merken
------- Rückwärts-Funktion hinzufügen
-------- Einzel-Schritt-Variante
-------- Letzter-Kistenwechsel-Variante
- reale Spielbarkeit hinzufügen
-- prüfen, Spielzüge möglich sind
--- generische Erweiterungsmethode, ob das Spielende bereits erreicht wurde
--- wurde die End-Stellung bereits erreicht
-- entsprechend erlaubte Spielzüge durchführen
-- zählen, wieviele Spielzüge bereits gemacht wurden (moves)
-- zählen, wieviele Kistenzüge bereits gemacht wurden (pushes)
--- sichbare Ausgabe erneuern
- grafische Darstellung des Spielfeldes


--- Helper: einfache Suche nach direkt kürzeren Laufwegen ---


--- Helper: Klickbarkeit auf ein Feld, wohin sich der Spieler direkt bewegen soll ---


--- Helper: einfachen Blocker erstellen (verbotene Stellungen für Kisten markieren) ---


--- Helper: drag & drop für einfache Kisten hinzufügen ---


--- Helper: drag & drop für komplexe Kisten-Kombination hinzufügen ---


--- Helper: drag & drop für nachträglich korrigerbare Kisten hinzufügen ---


--- Speed: Felder-Logik aufbauen (64-Bit optimierte Bitmap, 2 Bits pro Spielfeld) ---


--- Speed: Laufwege-Map erstellen ---


--- Solver: kisten-basierete Brute Force Suche (vorwärts & rückwärts, um gezielte Teil- und/oder Komplettlösungen zu erreichen) ---


--- Scanner: Kistenwege-Map erstellen, ob und wie schnell (steps) eine Kiste ein bestimmtes Ziel erreichen kann (durch Rückwärts-Suche und mit Erweiterung auf Multi-Kisten) ---


--- Optimizer: laufwege-basierte Brute Force Suche (vorwärts & rückwärts, um optimale Lösungen für Teil- und/oder Komplettlösungen zu erreichen) ---
