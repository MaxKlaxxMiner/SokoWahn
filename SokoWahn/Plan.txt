
--- Projekte erstellen und einrichten ---

- SokoWahnHelper erstellen (Window-Forms Programm)
-- Projekt erstellen und zur Solution hinzufügen
-- Projekt auf AnyCpu umstellen
-- SokoWahnLib verweisen
- SokoWahnTest erstellen (Unit-Test)
-- Projekt erstellen und zur Solution hinzufügen
-- SokoWahnLib verweisen


--- Basis-Spiel erstellen ---

- einfaches Spielfeld erstellen (Textbasiert) mit Test-Map
-- Konstruktor mit Textfeld/Textdatei
--- maximale Anzahl der Spalten ermitteln
--- maximale Anzahl der Zeilen ermitteln
--- Spielfeld zeichenbasiert einlesen (unbekannte Zeichen durch Leerzeichen ersetzen)
--- trimen von leeren Randbereichen
--- Spieler suchen und Position merken (nur genau einer Spieler darf vorhanden sein)
--- Ziele zählen
--- Kisten zählen und mit Ziele vergleichen
-- Ausgabe-Funktionen
--- Einzel-Abfrage bestimmter Felder
--- Komplett-Ausgabe textbasiert (für Debug-Zwecke)
- grundlegende Spielfunktionen mit Zielerkennung hinzufügen
-- Spielerbewegung, jeweils: links, rechts, oben und unten
--- prüfen, ob der Schritt erlaubt ist
---- Weg ist durch eine Mauer blockiert
---- Laufbarkeit in ein leeres benachbartes Feld
---- Verschiebbarkeit einer anliegenden Kiste im benachbarten Feld
---- anliegende Kiste, welche nicht verschiebbar ist
--- Bewegung ausführen
---- laufen (ohne Kiste)
---- schieben (mit Kiste)
----- prüfen ob die geschobene Kiste ein Ziel erreicht hat -> ggf. prüfen, ob alle Kisten ein Ziel erreicht haben und das Spiel fertig ist
---- Schritte jeder Art merken
----- Rückwärts-Funktion hinzufügen
------ Einzel-Schritt-Variante
------ Letzter-Kistenwechsel-Variante
- reale Spielbarkeit einbauen
-- einfache Text-Ausgabe des Spielfeldes
-- Tasten abfragen (links, rechts, oben, unten und zurück)
-- prüfen, Spielzüge möglich sind
--- Bewegungscheck, ob Zug erlaubt ist
--- wurde die End-Stellung bereits erreicht
-- entsprechend erlaubte Spielzüge durchführen
--- sichbare Ausgabe erneuern
- grafische Darstellung des Spielfeldes


--- Helper: einfache Suche nach direkt kürzeren Laufwegen ---


--- Helper: Klickbarkeit auf ein Feld, wohin sich der Spieler direkt bewegen soll ---


--- Helper: einfachen Blocker erstellen (verbotene Stellungen für Kisten markieren) ---


--- Helper: drag & drop für einfache Kisten hinzufügen ---


--- Helper: drag & drop für komplexe Kisten-Kombination hinzufügen ---


--- Helper: drag & drop für nachträglich korrigerbare Kisten hinzufügen ---


--- Speed: Felder-Logik aufbauen (64-Bit optimierte Bitmap, 2 Bits pro Spielfeld) ---


--- Speed: Laufwege-Map erstellen ---


--- Solver: kisten-basierete Brute Force Suche (vorwärts & rückwärts, um gezielte Teil- und/oder Komplettlösungen zu erreichen) ---


--- Scanner: Kistenwege-Map erstellen, ob und wie schnell (steps) eine Kiste ein bestimmtes Ziel erreichen kann (durch Rückwärts-Suche und mit Erweiterung auf Multi-Kisten) ---


--- Optimizer: laufwege-basierte Brute Force Suche (vorwärts & rückwärts, um optimale Lösungen für Teil- und/oder Komplettlösungen zu erreichen) ---
